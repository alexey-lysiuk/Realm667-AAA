#!/usr/bin/env python

#
# Realm667 - An Awesome Awesomeness
# Copyright (C) 2015 Alexey Lysiuk
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import io
import struct
import sys

import png


if sys.hexversion < 0x3000000:
    range = xrange


# Doom normal palette
_PALETTE = (
(0x00, 0x00, 0x00, 0xFF),
(0x1F, 0x17, 0x0B, 0xFF),
(0x17, 0x0F, 0x07, 0xFF),
(0x4B, 0x4B, 0x4B, 0xFF),
(0xFF, 0xFF, 0xFF, 0xFF),
(0x1B, 0x1B, 0x1B, 0xFF),
(0x13, 0x13, 0x13, 0xFF),
(0x0B, 0x0B, 0x0B, 0xFF),
(0x07, 0x07, 0x07, 0xFF),
(0x2F, 0x37, 0x1F, 0xFF),
(0x23, 0x2B, 0x0F, 0xFF),
(0x17, 0x1F, 0x07, 0xFF),
(0x0F, 0x17, 0x00, 0xFF),
(0x4F, 0x3B, 0x2B, 0xFF),
(0x47, 0x33, 0x23, 0xFF),
(0x3F, 0x2B, 0x1B, 0xFF),
(0xFF, 0xB7, 0xB7, 0xFF),
(0xF7, 0xAB, 0xAB, 0xFF),
(0xF3, 0xA3, 0xA3, 0xFF),
(0xEB, 0x97, 0x97, 0xFF),
(0xE7, 0x8F, 0x8F, 0xFF),
(0xDF, 0x87, 0x87, 0xFF),
(0xDB, 0x7B, 0x7B, 0xFF),
(0xD3, 0x73, 0x73, 0xFF),
(0xCB, 0x6B, 0x6B, 0xFF),
(0xC7, 0x63, 0x63, 0xFF),
(0xBF, 0x5B, 0x5B, 0xFF),
(0xBB, 0x57, 0x57, 0xFF),
(0xB3, 0x4F, 0x4F, 0xFF),
(0xAF, 0x47, 0x47, 0xFF),
(0xA7, 0x3F, 0x3F, 0xFF),
(0xA3, 0x3B, 0x3B, 0xFF),
(0x9B, 0x33, 0x33, 0xFF),
(0x97, 0x2F, 0x2F, 0xFF),
(0x8F, 0x2B, 0x2B, 0xFF),
(0x8B, 0x23, 0x23, 0xFF),
(0x83, 0x1F, 0x1F, 0xFF),
(0x7F, 0x1B, 0x1B, 0xFF),
(0x77, 0x17, 0x17, 0xFF),
(0x73, 0x13, 0x13, 0xFF),
(0x6B, 0x0F, 0x0F, 0xFF),
(0x67, 0x0B, 0x0B, 0xFF),
(0x5F, 0x07, 0x07, 0xFF),
(0x5B, 0x07, 0x07, 0xFF),
(0x53, 0x07, 0x07, 0xFF),
(0x4F, 0x00, 0x00, 0xFF),
(0x47, 0x00, 0x00, 0xFF),
(0x43, 0x00, 0x00, 0xFF),
(0xFF, 0xEB, 0xDF, 0xFF),
(0xFF, 0xE3, 0xD3, 0xFF),
(0xFF, 0xDB, 0xC7, 0xFF),
(0xFF, 0xD3, 0xBB, 0xFF),
(0xFF, 0xCF, 0xB3, 0xFF),
(0xFF, 0xC7, 0xA7, 0xFF),
(0xFF, 0xBF, 0x9B, 0xFF),
(0xFF, 0xBB, 0x93, 0xFF),
(0xFF, 0xB3, 0x83, 0xFF),
(0xF7, 0xAB, 0x7B, 0xFF),
(0xEF, 0xA3, 0x73, 0xFF),
(0xE7, 0x9B, 0x6B, 0xFF),
(0xDF, 0x93, 0x63, 0xFF),
(0xD7, 0x8B, 0x5B, 0xFF),
(0xCF, 0x83, 0x53, 0xFF),
(0xCB, 0x7F, 0x4F, 0xFF),
(0xBF, 0x7B, 0x4B, 0xFF),
(0xB3, 0x73, 0x47, 0xFF),
(0xAB, 0x6F, 0x43, 0xFF),
(0xA3, 0x6B, 0x3F, 0xFF),
(0x9B, 0x63, 0x3B, 0xFF),
(0x8F, 0x5F, 0x37, 0xFF),
(0x87, 0x57, 0x33, 0xFF),
(0x7F, 0x53, 0x2F, 0xFF),
(0x77, 0x4F, 0x2B, 0xFF),
(0x6B, 0x47, 0x27, 0xFF),
(0x5F, 0x43, 0x23, 0xFF),
(0x53, 0x3F, 0x1F, 0xFF),
(0x4B, 0x37, 0x1B, 0xFF),
(0x3F, 0x2F, 0x17, 0xFF),
(0x33, 0x2B, 0x13, 0xFF),
(0x2B, 0x23, 0x0F, 0xFF),
(0xEF, 0xEF, 0xEF, 0xFF),
(0xE7, 0xE7, 0xE7, 0xFF),
(0xDF, 0xDF, 0xDF, 0xFF),
(0xDB, 0xDB, 0xDB, 0xFF),
(0xD3, 0xD3, 0xD3, 0xFF),
(0xCB, 0xCB, 0xCB, 0xFF),
(0xC7, 0xC7, 0xC7, 0xFF),
(0xBF, 0xBF, 0xBF, 0xFF),
(0xB7, 0xB7, 0xB7, 0xFF),
(0xB3, 0xB3, 0xB3, 0xFF),
(0xAB, 0xAB, 0xAB, 0xFF),
(0xA7, 0xA7, 0xA7, 0xFF),
(0x9F, 0x9F, 0x9F, 0xFF),
(0x97, 0x97, 0x97, 0xFF),
(0x93, 0x93, 0x93, 0xFF),
(0x8B, 0x8B, 0x8B, 0xFF),
(0x83, 0x83, 0x83, 0xFF),
(0x7F, 0x7F, 0x7F, 0xFF),
(0x77, 0x77, 0x77, 0xFF),
(0x6F, 0x6F, 0x6F, 0xFF),
(0x6B, 0x6B, 0x6B, 0xFF),
(0x63, 0x63, 0x63, 0xFF),
(0x5B, 0x5B, 0x5B, 0xFF),
(0x57, 0x57, 0x57, 0xFF),
(0x4F, 0x4F, 0x4F, 0xFF),
(0x47, 0x47, 0x47, 0xFF),
(0x43, 0x43, 0x43, 0xFF),
(0x3B, 0x3B, 0x3B, 0xFF),
(0x37, 0x37, 0x37, 0xFF),
(0x2F, 0x2F, 0x2F, 0xFF),
(0x27, 0x27, 0x27, 0xFF),
(0x23, 0x23, 0x23, 0xFF),
(0x77, 0xFF, 0x6F, 0xFF),
(0x6F, 0xEF, 0x67, 0xFF),
(0x67, 0xDF, 0x5F, 0xFF),
(0x5F, 0xCF, 0x57, 0xFF),
(0x5B, 0xBF, 0x4F, 0xFF),
(0x53, 0xAF, 0x47, 0xFF),
(0x4B, 0x9F, 0x3F, 0xFF),
(0x43, 0x93, 0x37, 0xFF),
(0x3F, 0x83, 0x2F, 0xFF),
(0x37, 0x73, 0x2B, 0xFF),
(0x2F, 0x63, 0x23, 0xFF),
(0x27, 0x53, 0x1B, 0xFF),
(0x1F, 0x43, 0x17, 0xFF),
(0x17, 0x33, 0x0F, 0xFF),
(0x13, 0x23, 0x0B, 0xFF),
(0x0B, 0x17, 0x07, 0xFF),
(0xBF, 0xA7, 0x8F, 0xFF),
(0xB7, 0x9F, 0x87, 0xFF),
(0xAF, 0x97, 0x7F, 0xFF),
(0xA7, 0x8F, 0x77, 0xFF),
(0x9F, 0x87, 0x6F, 0xFF),
(0x9B, 0x7F, 0x6B, 0xFF),
(0x93, 0x7B, 0x63, 0xFF),
(0x8B, 0x73, 0x5B, 0xFF),
(0x83, 0x6B, 0x57, 0xFF),
(0x7B, 0x63, 0x4F, 0xFF),
(0x77, 0x5F, 0x4B, 0xFF),
(0x6F, 0x57, 0x43, 0xFF),
(0x67, 0x53, 0x3F, 0xFF),
(0x5F, 0x4B, 0x37, 0xFF),
(0x57, 0x43, 0x33, 0xFF),
(0x53, 0x3F, 0x2F, 0xFF),
(0x9F, 0x83, 0x63, 0xFF),
(0x8F, 0x77, 0x53, 0xFF),
(0x83, 0x6B, 0x4B, 0xFF),
(0x77, 0x5F, 0x3F, 0xFF),
(0x67, 0x53, 0x33, 0xFF),
(0x5B, 0x47, 0x2B, 0xFF),
(0x4F, 0x3B, 0x23, 0xFF),
(0x43, 0x33, 0x1B, 0xFF),
(0x7B, 0x7F, 0x63, 0xFF),
(0x6F, 0x73, 0x57, 0xFF),
(0x67, 0x6B, 0x4F, 0xFF),
(0x5B, 0x63, 0x47, 0xFF),
(0x53, 0x57, 0x3B, 0xFF),
(0x47, 0x4F, 0x33, 0xFF),
(0x3F, 0x47, 0x2B, 0xFF),
(0x37, 0x3F, 0x27, 0xFF),
(0xFF, 0xFF, 0x73, 0xFF),
(0xEB, 0xDB, 0x57, 0xFF),
(0xD7, 0xBB, 0x43, 0xFF),
(0xC3, 0x9B, 0x2F, 0xFF),
(0xAF, 0x7B, 0x1F, 0xFF),
(0x9B, 0x5B, 0x13, 0xFF),
(0x87, 0x43, 0x07, 0xFF),
(0x73, 0x2B, 0x00, 0xFF),
(0xFF, 0xFF, 0xFF, 0xFF),
(0xFF, 0xDB, 0xDB, 0xFF),
(0xFF, 0xBB, 0xBB, 0xFF),
(0xFF, 0x9B, 0x9B, 0xFF),
(0xFF, 0x7B, 0x7B, 0xFF),
(0xFF, 0x5F, 0x5F, 0xFF),
(0xFF, 0x3F, 0x3F, 0xFF),
(0xFF, 0x1F, 0x1F, 0xFF),
(0xFF, 0x00, 0x00, 0xFF),
(0xEF, 0x00, 0x00, 0xFF),
(0xE3, 0x00, 0x00, 0xFF),
(0xD7, 0x00, 0x00, 0xFF),
(0xCB, 0x00, 0x00, 0xFF),
(0xBF, 0x00, 0x00, 0xFF),
(0xB3, 0x00, 0x00, 0xFF),
(0xA7, 0x00, 0x00, 0xFF),
(0x9B, 0x00, 0x00, 0xFF),
(0x8B, 0x00, 0x00, 0xFF),
(0x7F, 0x00, 0x00, 0xFF),
(0x73, 0x00, 0x00, 0xFF),
(0x67, 0x00, 0x00, 0xFF),
(0x5B, 0x00, 0x00, 0xFF),
(0x4F, 0x00, 0x00, 0xFF),
(0x43, 0x00, 0x00, 0xFF),
(0xE7, 0xE7, 0xFF, 0xFF),
(0xC7, 0xC7, 0xFF, 0xFF),
(0xAB, 0xAB, 0xFF, 0xFF),
(0x8F, 0x8F, 0xFF, 0xFF),
(0x73, 0x73, 0xFF, 0xFF),
(0x53, 0x53, 0xFF, 0xFF),
(0x37, 0x37, 0xFF, 0xFF),
(0x1B, 0x1B, 0xFF, 0xFF),
(0x00, 0x00, 0xFF, 0xFF),
(0x00, 0x00, 0xE3, 0xFF),
(0x00, 0x00, 0xCB, 0xFF),
(0x00, 0x00, 0xB3, 0xFF),
(0x00, 0x00, 0x9B, 0xFF),
(0x00, 0x00, 0x83, 0xFF),
(0x00, 0x00, 0x6B, 0xFF),
(0x00, 0x00, 0x53, 0xFF),
(0xFF, 0xFF, 0xFF, 0xFF),
(0xFF, 0xEB, 0xDB, 0xFF),
(0xFF, 0xD7, 0xBB, 0xFF),
(0xFF, 0xC7, 0x9B, 0xFF),
(0xFF, 0xB3, 0x7B, 0xFF),
(0xFF, 0xA3, 0x5B, 0xFF),
(0xFF, 0x8F, 0x3B, 0xFF),
(0xFF, 0x7F, 0x1B, 0xFF),
(0xF3, 0x73, 0x17, 0xFF),
(0xEB, 0x6F, 0x0F, 0xFF),
(0xDF, 0x67, 0x0F, 0xFF),
(0xD7, 0x5F, 0x0B, 0xFF),
(0xCB, 0x57, 0x07, 0xFF),
(0xC3, 0x4F, 0x00, 0xFF),
(0xB7, 0x47, 0x00, 0xFF),
(0xAF, 0x43, 0x00, 0xFF),
(0xFF, 0xFF, 0xFF, 0xFF),
(0xFF, 0xFF, 0xD7, 0xFF),
(0xFF, 0xFF, 0xB3, 0xFF),
(0xFF, 0xFF, 0x8F, 0xFF),
(0xFF, 0xFF, 0x6B, 0xFF),
(0xFF, 0xFF, 0x47, 0xFF),
(0xFF, 0xFF, 0x23, 0xFF),
(0xFF, 0xFF, 0x00, 0xFF),
(0xA7, 0x3F, 0x00, 0xFF),
(0x9F, 0x37, 0x00, 0xFF),
(0x93, 0x2F, 0x00, 0xFF),
(0x87, 0x23, 0x00, 0xFF),
(0x4F, 0x3B, 0x27, 0xFF),
(0x43, 0x2F, 0x1B, 0xFF),
(0x37, 0x23, 0x13, 0xFF),
(0x2F, 0x1B, 0x0B, 0xFF),
(0x00, 0x00, 0x53, 0xFF),
(0x00, 0x00, 0x47, 0xFF),
(0x00, 0x00, 0x3B, 0xFF),
(0x00, 0x00, 0x2F, 0xFF),
(0x00, 0x00, 0x23, 0xFF),
(0x00, 0x00, 0x17, 0xFF),
(0x00, 0x00, 0x0B, 0xFF),
(0x00, 0x00, 0x00, 0xFF),
(0xFF, 0x9F, 0x43, 0xFF),
(0xFF, 0xE7, 0x4B, 0xFF),
(0xFF, 0x7B, 0xFF, 0xFF),
(0xFF, 0x00, 0xFF, 0xFF),
(0xCF, 0x00, 0xCF, 0xFF),
(0x9F, 0x00, 0x9B, 0xFF),
(0x6F, 0x00, 0x6B, 0xFF),
(0xA7, 0x6B, 0x6B, 0xFF))

_TRANSPARENT_REMAP= (0, 247) # duplicate black color


def doompic_to_png(data, compression=-1):
    pic = io.BytesIO(data)

    # read header
    width, height, left, top = struct.unpack('<2H2h', pic.read(8))
    column_array = []

    for i in range(width):
        offset = struct.unpack('<I', pic.read(4))
        column_array.append(offset[0])

    # read pixel data
    row = [-1 for _ in range(width)]
    pixels = [row[:] for _ in range(height)]

    for i in range(width):
        pic.seek(column_array[i])
        rowstart = 0

        while 255 != rowstart:
            rowstart = ord(pic.read(1))

            if 255 == rowstart:
                break

            pixel_count = ord(pic.read(1))
            pic.read(1) # dummy

            for j in range(pixel_count):
                pixels[rowstart + j][i] = ord(pic.read(1))

            pic.read(1) # dummy

    # replace holes with trasparent color
    used_colors = [0 for _ in range(256)]

    for j in range(height):
        for i in range(width):
            pixel = pixels[j][i]
            assert -1 <= pixel < 256

            if -1 != pixel:
                used_colors[pixel] += 1

    try:
        transparent = used_colors.index(0)
    except ValueError:
        # all colors are used, use duplicate color
        transparent = _TRANSPARENT_REMAP[1]

    for j in range(height):
        for i in range(width):
            pixel = pixels[j][i]

            if -1 == pixel:
                pixels[j][i] = transparent
            elif transparent == pixel:
                pixels[j][i] = _TRANSPARENT_REMAP[0]

    palette = list(_PALETTE)
    palette[transparent] = (
        palette[transparent][0],
        palette[transparent][1],
        palette[transparent][2],
        0x00)

    # create PNG image
    png_data = io.BytesIO()
    png_image = png.Writer(len(pixels[0]), len(pixels),
        palette = palette, compression = compression)
    png_image.custom_chunks['grAb'] = struct.pack('>2i', left, top)
    png_image.write(png_data, pixels)

    return png_data.getvalue()


if __name__ == '__main__':
    import sys

    if 1 == len(sys.argv):
        print('Usage: {0} sprite.lmp ...'.format(__file__))
        exit(1)

    import profiling

    for filename in sys.argv[1:]:
        with open(filename, 'rb') as in_file:
            profiler = profiling.Profiler(False)
            png_image = doompic_to_png(in_file.read(), 9)
            profiler.close()

            with open(filename + '.png', 'wb') as out_file:
                out_file.write(png_image)
